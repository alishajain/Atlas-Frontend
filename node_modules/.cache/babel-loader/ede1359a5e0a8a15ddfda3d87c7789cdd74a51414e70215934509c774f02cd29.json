{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL;\n\n// Add a new process\nexport const addProcess = async processData => {\n  try {\n    const response = await axios.post(`${API_URL}/add-process`, processData);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error(\"Error adding process:\", error);\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message;\n  }\n};\n\n// Update an existing process by RSN and ProcessName\nexport const updateProcess = async (RSN, ProcessName, updatedData) => {\n  try {\n    const response = await axios.put(`${API_URL}/update-process/${RSN}/${ProcessName}`, updatedData);\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    console.error(\"Error updating process:\", error);\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message;\n  }\n};\n\n// Search for a process by RSN\nexport const searchByRSN = async RSN => {\n  try {\n    const response = await axios.get(`${API_URL}/process/${RSN}`);\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    console.error(\"Error fetching process by RSN:\", error);\n    throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message;\n  }\n};\n\n// Delete a process by RSN and ProcessName\nexport const deleteProcess = async (RSN, ProcessName) => {\n  try {\n    const response = await axios.delete(`${API_URL}/delete-process/${RSN}/${ProcessName}`);\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    console.error(\"Error deleting process:\", error);\n    throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message;\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","addProcess","processData","response","post","data","error","_error$response","console","message","updateProcess","RSN","ProcessName","updatedData","put","_error$response2","searchByRSN","get","_error$response3","deleteProcess","delete","_error$response4"],"sources":["C:/Users/Alisha Jain/Desktop/ALISHA JAIN/atlas/Atlas-Frontend/src/API/ProcessApi.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\n// Add a new process\r\nexport const addProcess = async (processData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/add-process`, processData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error adding process:\", error);\r\n    throw error.response?.data || error.message;\r\n  }\r\n};\r\n\r\n// Update an existing process by RSN and ProcessName\r\nexport const updateProcess = async (RSN, ProcessName, updatedData) => {\r\n  try {\r\n    const response = await axios.put(`${API_URL}/update-process/${RSN}/${ProcessName}`, updatedData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error updating process:\", error);\r\n    throw error.response?.data || error.message;\r\n  }\r\n};\r\n\r\n// Search for a process by RSN\r\nexport const searchByRSN = async (RSN) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/process/${RSN}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching process by RSN:\", error);\r\n    throw error.response?.data || error.message;\r\n  }\r\n};\r\n\r\n// Delete a process by RSN and ProcessName\r\nexport const deleteProcess = async (RSN, ProcessName) => {\r\n  try {\r\n    const response = await axios.delete(`${API_URL}/delete-process/${RSN}/${ProcessName}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error deleting process:\", error);\r\n    throw error.response?.data || error.message;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;;AAE7C;AACA,OAAO,MAAMC,UAAU,GAAG,MAAOC,WAAW,IAAK;EAC/C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGP,OAAO,cAAc,EAAEK,WAAW,CAAC;IACxE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA;IACdC,OAAO,CAACF,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAM,EAAAC,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,KAAIC,KAAK,CAACG,OAAO;EAC7C;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOC,GAAG,EAAEC,WAAW,EAAEC,WAAW,KAAK;EACpE,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMP,KAAK,CAACkB,GAAG,CAAC,GAAGjB,OAAO,mBAAmBc,GAAG,IAAIC,WAAW,EAAE,EAAEC,WAAW,CAAC;IAChG,OAAOV,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAS,gBAAA;IACdP,OAAO,CAACF,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAM,EAAAS,gBAAA,GAAAT,KAAK,CAACH,QAAQ,cAAAY,gBAAA,uBAAdA,gBAAA,CAAgBV,IAAI,KAAIC,KAAK,CAACG,OAAO;EAC7C;AACF,CAAC;;AAED;AACA,OAAO,MAAMO,WAAW,GAAG,MAAOL,GAAG,IAAK;EACxC,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMP,KAAK,CAACqB,GAAG,CAAC,GAAGpB,OAAO,YAAYc,GAAG,EAAE,CAAC;IAC7D,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAY,gBAAA;IACdV,OAAO,CAACF,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAM,EAAAY,gBAAA,GAAAZ,KAAK,CAACH,QAAQ,cAAAe,gBAAA,uBAAdA,gBAAA,CAAgBb,IAAI,KAAIC,KAAK,CAACG,OAAO;EAC7C;AACF,CAAC;;AAED;AACA,OAAO,MAAMU,aAAa,GAAG,MAAAA,CAAOR,GAAG,EAAEC,WAAW,KAAK;EACvD,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMP,KAAK,CAACwB,MAAM,CAAC,GAAGvB,OAAO,mBAAmBc,GAAG,IAAIC,WAAW,EAAE,CAAC;IACtF,OAAOT,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAe,gBAAA;IACdb,OAAO,CAACF,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAM,EAAAe,gBAAA,GAAAf,KAAK,CAACH,QAAQ,cAAAkB,gBAAA,uBAAdA,gBAAA,CAAgBhB,IAAI,KAAIC,KAAK,CAACG,OAAO;EAC7C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}